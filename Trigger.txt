
-- Course Table
SELECT * INTO CourseCopy
FROM Course
WHERE 1 = 0;

ALTER TABLE CourseCopy
ADD AuditAction NVARCHAR(100),
    AuditTimestamp DATETIME;

CREATE TRIGGER triggerCourseBackup
ON Course
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    -- Insert Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO CourseCopy (CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, 'INSERT', GETDATE()
        FROM inserted;
    END

    -- Delete Trigger Logic
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO CourseCopy (CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, 'DELETE', GETDATE()
        FROM deleted;
    END

    -- Update Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        -- Record Old Values (for UPDATE)
        INSERT INTO CourseCopy (CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID,'UPDATE_OLD', GETDATE()
        FROM deleted;

        -- Record New Values (for UPDATE)
        INSERT INTO CourseCopy (CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID,AuditAction, AuditTimestamp)
        SELECT CourseID, Name, CreditHrTh, CreditHrLab, ProgID, SemID, 'UPDATE_NEW', GETDATE()
        FROM inserted;
    END
END;

SELECT * FROM Course;
SELECT * FROM CourseCopy;

-- Student Table
SELECT * INTO StudentCopy
FROM Student
WHERE 1 = 0;

ALTER TABLE StudentCopy
ADD AuditAction NVARCHAR(100),
    AuditTimestamp DATETIME;

CREATE TRIGGER triggerStudentBackups
ON Student
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    -- Insert Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO dbo.StudentCopy (StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, 'INSERT', GETDATE()
        FROM inserted;
    END

    -- Delete Trigger Logic
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO dbo.StudentCopy (StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, 'DELETE', GETDATE()
        FROM deleted;
    END

    -- Update Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        -- Record Old Values
        INSERT INTO dbo.StudentCopy (StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, 'UPDATE_OLD', GETDATE()
        FROM deleted;

        -- Record New Values
        INSERT INTO dbo.StudentCopy (StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, AuditAction, AuditTimestamp)
        SELECT StudentID, StudentName, DOB, Address, Phone, CourseID, ProgID, SemID, 'UPDATE_NEW', GETDATE()
        FROM inserted;
    END
END;

SELECT * FROM Student;
SELECT * FROM StudentCopy;

-- Teacher Table
SELECT * INTO TeacherCopy
FROM Teacher
WHERE 1 = 0;

ALTER TABLE TeacherCopy
ADD AuditAction NVARCHAR(100),
    AuditTimestamp DATETIME;
CREATE TRIGGER triggerTeacherBackup
ON Teacher
FOR INSERT, UPDATE, DELETE
AS
BEGIN
    -- Insert Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted)
    BEGIN
        INSERT INTO dbo.TeacherCopy (TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, AuditAction, AuditTimestamp)
        SELECT TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, 'INSERT', GETDATE()
        FROM inserted;
    END

    -- Delete Trigger Logic
    IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS (SELECT * FROM inserted)
    BEGIN
        INSERT INTO dbo.TeacherCopy (TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, AuditAction, AuditTimestamp)
        SELECT TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, 'DELETE', GETDATE()
        FROM deleted;
    END

    -- Update Trigger Logic
    IF EXISTS (SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted)
    BEGIN
        -- Record Old Values
        INSERT INTO dbo.TeacherCopy (TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, AuditAction, AuditTimestamp)
        SELECT TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, 'UPDATE_OLD', GETDATE()
        FROM deleted;

        -- Record New Values
        INSERT INTO dbo.TeacherCopy (TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, AuditAction, AuditTimestamp)
        SELECT TeacherID, TeacherName, DOJ, Status, Salary, Job, CourseID, SemID, ProgID, 'UPDATE_NEW', GETDATE()
        FROM inserted;
    END
END;

SELECT * FROM TeacherCopy;
SELECT * FROM Teacher


